service: andres-restaurant

frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.9
  region: us-east-1

resources:
  Resources:
    MyDatabase: 
      Type: AWS::RDS::DBInstance
      Properties:
        AllocatedStorage: 20
        DBInstanceClass: db.t2.micro
        Engine: MySQL
        EngineVersion: 5.7
        MasterUsername: admin
        MasterUserPassword: 123456789
        MultiAZ: false
        StorageType: gp2
        PubliclyAccessible: true

    MyOrderQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: order-queue
        DelaySeconds: 15
        MessageRetentionPeriod: 1209600

    MyOrderBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: my-order-bucket
        WebsiteConfiguration:
          IndexDocument: index.html

    MyOrderBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref MyOrderBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: !Join [ "", [ "arn:aws:s3:::", !Ref MyOrderBucket, "/*" ] ]

functions:
  createOrder:
    handler: src/createOrder.handler
    events:
      - http:
          path: orders
          method: post

  pedidos:
    handler: src/pedidos.handler
    events:
      - http:
          path: pedidos
          method: post
          cors: true

  getIndex:
    handler: src/getIndex.handler
    events:
      - http:
          path: /
          method: get

  getOrder:
    handler: src/getOrder.handler
    events:
      - http:
          path: orders/{orderId}
          method: get

  processOrders:
    handler: src/processOrders.handler
    events:
      - schedule: cron(0/15 * * * ? *)

custom:
  pythonRequirements:
    dockerizePip: true
    slim: true
    noDeploy:
      - pandas
